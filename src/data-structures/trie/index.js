import TrieNode, { HEAD_CHARACTER } from './node'

// –ü—Ä–µ—Ñ–∏–∫—Å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
export default class Trie {
  constructor() {
    // –ì–æ–ª–æ–≤–Ω–æ–π (–∫–æ—Ä–Ω–µ–≤–æ–π) —É–∑–µ–ª
    this.head = new TrieNode(HEAD_CHARACTER)
  }

  // –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ (–∫–ª—é—á) –≤ –¥–µ—Ä–µ–≤–æ
  addWord(word) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É (—Å–ª–æ–≤–æ) –≤ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤
    // (–≤–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞—Å—ã–ø–∫—É: –ø–æ—á–µ–º—É –ª—É—á—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `split()`?
    // –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å "Hello, üëã!")
    const chars = [...word]

    // –¢–µ–∫—É—â–∏–π —É–∑–µ–ª (–Ω–∞—á–∏–Ω–∞–µ–º —Å –≥–æ–ª–æ–≤–Ω–æ–≥–æ)
    let node = this.head

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤ –¥–µ—Ä–µ–≤–æ
    for (let i = 0; i < chars.length; i++) {
      // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ) —Å–∏–º–≤–æ–ª–∞
      const isComplete = i === chars.length - 1
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–º–∫–∞
      node = node.addChild(chars[i], isComplete)
    }

    return this
  }

  // –£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ (–∫–ª—é—á) –∏–∑ –¥–µ—Ä–µ–≤–∞
  removeWord(word) {
    // –£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ ("—Å–Ω–∞—á–∞–ª–∞ –≤ –≥–ª—É–±–∏–Ω—É")
    const depthFirstRemove = (node, i = 0) => {
      // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π —Å–∏–º–≤–æ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–ª–æ–≤–∞,
      // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      if (i >= word.length) return

      // –°–∏–º–≤–æ–ª
      const char = word[i]
      // –°–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª
      const nextNode = node.getChild(char)

      // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
      // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      if (!nextNode) return

      // –ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≥–ª—É–±–∂–µ
      depthFirstRemove(nextNode, i + 1)

      // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã —É–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ,
      // –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ `isCompleteWord`
      // –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
      if (i === word.length - 1) {
        nextNode.isCompleteWord = false
      }

      // –£–∑–µ–ª —É–¥–∞–ª—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
      // - —É –Ω–µ–≥–æ –Ω–µ—Ç –ø–æ—Ç–æ–º–∫–æ–≤
      // - nextNode.isCompleteWord === false
      node.removeChild(char)
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –≥–æ–ª–æ–≤–Ω–æ–≥–æ —É–∑–ª–∞
    depthFirstRemove(this.head)

    return this
  }

  // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)
  suggestNextCharacters(word) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
    const lastChar = this.getLastCharNode(word)

    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if (!lastChar) {
      return null
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return lastChar.suggestChildren()
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ –≤ –¥–µ—Ä–µ–≤–µ
  doesWordExist(word) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
    const lastChar = this.getLastCharNode(word)

    return Boolean(lastChar) && lastChar.isCompleteWord
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
  getLastCharNode(word) {
    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
    const chars = [...word]
    // –¢–µ–∫—É—â–∏–π —É–∑–µ–ª (–Ω–∞—á–∏–Ω–∞–µ–º —Å –≥–æ–ª–æ–≤–Ω–æ–≥–æ)
    let node = this.head

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã
    for (let i = 0; i < chars.length; i++) {
      // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      if (!node.hasChild(chars[i])) {
        return null
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ç–æ–º–∫–∞
      node = node.getChild(chars[i])
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–∑–µ–ª
    return node
  }
}
