/**
 * Возвращает множество всех подмножеств с помощью каскадного подхода
 */
export default function cascading(set) {
  // начинаем с пустого множества
  const sets = [[]]

  /*
    Допустим:
    originalSet = [1, 2, 3].

    Добавляем первый элемент originalSet во все существующие множества:
    [[]] ← 1 = [[], [1]]

    Добавляем второй элемент во все существующие множества:
    [[], [1]] ← 2 = [[], [1], [2], [1, 2]]

    Добавляем третий элемент:
    [[], [1], [2], [1, 2]] ← 3 = [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]

    И так для всех элементов originalSet.
    На каждой итерации количество множеств удваивается, поэтому мы получаем 2^n множеств.
  */
  for (let i = 0; i < set.length; i++) {
    // Важно: без этого мы получим бесконечный цикл,
    // поскольку длина `sets` будет увеличиваться на каждой итерации
    const len = sets.length
    for (let j = 0; j < len; j++) {
      const _set = [...sets[j], set[i]]
      sets.push(_set)
    }
  }

  return sets
}
