/**
 * Возвращает множество всех подмножеств с помощью бинарного подхода
 */
export default function bitwise(set) {
  const subsets = []

  // количество подмножеств = `2^n`, где `n` - количество элементов в `set`.
  // Это обусловлено тем, что для каждого элемента `set` мы будем решать,
  // включать его или нет (2 варианта на каждый элемент)
  const numberOfCombinations = 2 ** set.length

  // Каждое число в двоичном представлении в диапазоне от 0 до 2^n делает именно то, что нам нужно:
  // своими битами (0 или 1) оно показывает, включать элемент или нет.
  // Например, для множества `{1, 2, 3}` двоичное число `0b010` будет означать, что
  // в текущее множество включается только `2`
  for (let i = 0; i < numberOfCombinations; i++) {
    const subset = []

    for (let j = 0; j < set.length; j++) {
      // Решаем, включать текущий элемента в подмножество или нет
      if (i & (1 << j)) {
        subset.push(set[j])
      }
    }

    subsets.push(subset)
  }

  return subsets
}
